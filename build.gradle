plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id "io.opentelemetry.instrumentation.muzzle-generation" version "2.6.0-alpha"
    id "io.opentelemetry.instrumentation.muzzle-check" version "2.6.0-alpha"
}

ext {
    nexusUrl = 'http://xxxxxxxx:xxxxx/repository/techsupport-snapshot'
    profile= project.hasProperty("profile") ? project.property("profile").toString() : "local"
}

repositories {
    mavenCentral()
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility  = JavaVersion.VERSION_17



apply plugin: "io.github.goooler.shadow"
apply plugin: 'java'
apply plugin: 'io.opentelemetry.instrumentation.muzzle-generation'
apply plugin: 'io.opentelemetry.instrumentation.muzzle-check'
apply from: 'dependency.gradle'




test {
    exclude '**/*'
}


// 압축 해제 디렉토리
def extractDir = file("build/extracted")

tasks.register("extractJar", Copy) {
    from zipTree(tasks.shadowJar.archiveFile.get().asFile)
    into extractDir
}

tasks.named('shadowJar') {

    dependencies {

        exclude(dependency('io.opentelemetry.javaagent:opentelemetry-muzzle:2.6.0-alpha'))
        exclude(dependency('io.opentelemetry.instrumentation:opentelemetry-instrumentation-api-incubator:2.6.0-alpha'))
        exclude(dependency('io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api:2.6.0-alpha'))
        exclude(dependency('io.opentelemetry.instrumentation:opentelemetry-instrumentation-api:2.6.0'))
        exclude(dependency('io.opentelemetry.javaagent:opentelemetry-javaagent-bootstrap:2.6.0-alpha'))
        exclude(dependency('io.opentelemetry:opentelemetry-sdk-extension-autoconfigure:1.40.0'))
        exclude(dependency('io.opentelemetry:opentelemetry-sdk-extension-autoconfigure-spi:1.40.0'))
        exclude(dependency('io.opentelemetry.semconv:opentelemetry-semconv:1.25.0-alpha'))
        exclude(dependency('io.opentelemetry:opentelemetry-api-incubator:1.40.0-alpha'))
        exclude(dependency('io.opentelemetry:opentelemetry-api:1.40.0'))
        exclude(dependency('io.opentelemetry:opentelemetry-context:1.40.0'))
        exclude(dependency('net.bytebuddy:byte-buddy-dep:1.14.18'))
        exclude(dependency('org.ow2.asm:asm:9.7'))
        exclude(dependency('org.ow2.asm:asm-tree:9.7'))
        exclude(dependency('org.ow2.asm:asm-commons:9.7'))

    }

    relocate(
            'io.lettuce.',
            'kr.co.pionnet.hamonica2.agent.io.lettuce.'
    )

    relocate(
            'io.netty.',
            'kr.co.pionnet.hamonica2.agent.io.netty.'
    )

    relocate(
            'io.projectreactor.',
            'kr.co.pionnet.hamonica2.agent.io.projectreactor.'
    )

    relocate(
            'org.reactivestreams.',
            'kr.co.pionnet.hamonica2.agent.org.reactivestreams.'
    )

    relocate(
            'reactor.',
            'kr.co.pionnet.hamonica2.agent.reactor.'
    )

    relocate(
            'javax.',
            'kr.co.pionnet.hamonica2.agent.javax.'
    )


    relocate('com.hazelcast.',
            'kr.co.pionnet.hamonica2.agent.hazelcast.'
    )

    relocate('com.mongodb.'
            , 'kr.co.pionnet.hamonica2.agent.com.mongodb.'
    )

    relocate(
            'org.bson.',
            'kr.co.pionnet.hamonica2.agent.org.bson.'
    )


    relocate(
            'org.apache.commons.',
            'kr.co.pionnet.hamonica2.agent.org.apache.commons.'
    )

}



tasks.register('buildExtension', Jar) {

    dependsOn 'clean', 'build' //, 'shadowJar', 'extractJar'

    from ('build/classes/java/main') {
        include("**/**")
    }

    archiveFileName = "${project.name}-${version}.jar"

    finalizedBy(tasks.named('copyJar'))
}

tasks.named('build') {
    mustRunAfter 'clean'
}



tasks.register('copyJar', Copy) {

    from(layout.buildDirectory.dir('libs')) {
        include "${project.name}-${version}.jar"
    }
    into "../common/dist"
}

